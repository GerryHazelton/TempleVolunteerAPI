// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TempleVolunteerAPI.Repository;

#nullable disable

namespace TempleVolunteerAPI.Repository.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20220918123854_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("SupplyItemsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AreaId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5389),
                            Description = "This is the main temple area",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Main Temple",
                            Note = "There are no notes",
                            PropertyId = 1,
                            SupplyItemsAllowed = true
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaEventTask", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("EventTaskId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "EventTaskId");

                    b.HasIndex("EventTaskId");

                    b.ToTable("AreaEvenTask", (string)null);

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            EventTaskId = 1,
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaEventType", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "EventTypeId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("AreaEvenType", (string)null);

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            EventTypeId = 1,
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaSupplyItem", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyItemId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "SupplyItemId");

                    b.HasIndex("SupplyItemId");

                    b.ToTable("AreaSupplyItem", (string)null);

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            SupplyItemId = 1,
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5409),
                            Description = "This is a garden tool category",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Garden Tool",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Credential", b =>
                {
                    b.Property<int>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialId"), 1L, 1);

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CredentialFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("CredentialImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CredentialId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Credentials");

                    b.HasData(
                        new
                        {
                            CredentialId = 1,
                            CompletedDate = new DateTime(2022, 9, 18, 5, 38, 53, 419, DateTimeKind.Local).AddTicks(5424),
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5426),
                            Description = "CRP Certification",
                            IsActive = true,
                            IsHidden = false,
                            Name = "CPR",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.CredentialStaff", b =>
                {
                    b.Property<int>("CredentialId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("CredentialId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("CredentialStaff", (string)null);

                    b.HasData(
                        new
                        {
                            CredentialId = 1,
                            StaffId = 1,
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DocumentFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("DocumentImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            DocumentId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5442),
                            Description = "A list of events for the year",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Annual Event List",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorLogId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Environment")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Indefinite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5464),
                            Description = "Master's birthday celebration",
                            EndDate = new DateTime(2022, 9, 19, 5, 38, 53, 419, DateTimeKind.Local).AddTicks(5461),
                            Indefinite = false,
                            IsActive = true,
                            IsHidden = false,
                            Name = "Master's Birthday",
                            Note = "There are no notes",
                            PropertyId = 1,
                            StartDate = new DateTime(2022, 9, 18, 5, 38, 53, 419, DateTimeKind.Local).AddTicks(5459)
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventEventType", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "EventTypeId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventEventType", (string)null);

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            EventTypeId = 1,
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventTask", b =>
                {
                    b.Property<int>("EventTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTaskId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTaskId");

                    b.HasIndex("PropertyId");

                    b.ToTable("EventTasks");

                    b.HasData(
                        new
                        {
                            EventTaskId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5479),
                            Description = "Setting up tables",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Table setup",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5495),
                            Description = "Birthday event",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Birthday",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("MessageSent")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5651),
                            From = "gerryhazelton@gmail.com",
                            IsActive = true,
                            IsHidden = false,
                            MessageSent = "This is my message",
                            PropertyId = 1,
                            StaffId = 1,
                            Subject = "Hello",
                            To = "janedoe@gmail.com"
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Address2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PropertyId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Address = "123 Main Street",
                            Address2 = "Suite 45",
                            City = "Glendale",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(4779),
                            EmailAddress = "Glendale@Srf.com",
                            FaxNumber = "333-333-3333",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Glendale Temple",
                            Note = "Currently, there are no notes",
                            PhoneNumber = "222-222-2222",
                            PostalCode = "91001",
                            State = "CA",
                            Website = "https://www.glendaletemple.org"
                        },
                        new
                        {
                            PropertyId = 2,
                            Address = "456 Main Street",
                            Address2 = "Suite 65",
                            City = "Encinitas",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(4784),
                            EmailAddress = "Encinitas@Srf.com",
                            FaxNumber = "666-666-6666",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Encinitas Temple",
                            Note = "Currently, there are no notes",
                            PhoneNumber = "555-555-5555",
                            PostalCode = "92026",
                            State = "CA",
                            Website = "https://www.encinitastemple.org"
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.PropertyStaff", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("PropertyStaff", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("StaffId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(4977),
                            Description = "Admin role has full prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Admin",
                            PropertyId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(4980),
                            Description = "Volunteer has limited prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Volunteer",
                            PropertyId = 1
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(4983),
                            Description = "Admin role has full prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Admin",
                            PropertyId = 2
                        },
                        new
                        {
                            RoleId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(4985),
                            Description = "Volunteer has limited prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Volunteer",
                            PropertyId = 2
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.RoleStaff", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("RoleStaff", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            StaffId = 1,
                            PropertyId = 1
                        },
                        new
                        {
                            RoleId = 4,
                            StaffId = 2,
                            PropertyId = 2
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"), 1L, 1);

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Address2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("CPR")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSendMessages")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewDocuments")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstAid")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("Kriyaban")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LessonStudent")
                        .HasColumnType("bit");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("StaffFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("StaffImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            AcceptTerms = true,
                            Address = "123 Main Street",
                            Address2 = "Apt. B",
                            CPR = true,
                            CanSendMessages = true,
                            CanViewDocuments = false,
                            City = "Carlsbad",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5319),
                            EmailAddress = "gerryhazelton@gmail.com",
                            EmailConfirmed = true,
                            FirstAid = true,
                            FirstName = "Gerry",
                            Gender = "Male",
                            IsActive = true,
                            IsHidden = false,
                            IsLockedOut = false,
                            IsVerified = true,
                            Kriyaban = true,
                            LastName = "Hazelton",
                            LessonStudent = true,
                            LoginAttempts = 0,
                            Password = "OLpa5mnXgMZyfwlSkiHI2/enbMo4iTQkPpE9+xYHMEI=",
                            PasswordSalt = "371952==",
                            PhoneNumber = "760-444-4444",
                            PostalCode = "92009",
                            PropertyId = 2,
                            RememberMe = true,
                            State = "CA",
                            VerifiedDate = new DateTime(2022, 9, 18, 5, 38, 53, 419, DateTimeKind.Local).AddTicks(5316)
                        },
                        new
                        {
                            StaffId = 2,
                            AcceptTerms = true,
                            Address = "123 Main Street",
                            Address2 = "Apt. B",
                            CPR = true,
                            CanSendMessages = true,
                            CanViewDocuments = false,
                            City = "Carlsbad",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5330),
                            EmailAddress = "gerryhazelton@gmail.com",
                            EmailConfirmed = false,
                            FirstAid = true,
                            FirstName = "Gerry",
                            Gender = "Male",
                            IsActive = true,
                            IsHidden = false,
                            IsLockedOut = false,
                            IsVerified = true,
                            Kriyaban = true,
                            LastName = "Hazelton",
                            LessonStudent = true,
                            LoginAttempts = 0,
                            Password = "OLpa5mnXgMZyfwlSkiHI2/enbMo4iTQkPpE9+xYHMEI=",
                            PasswordSalt = "371952==",
                            PhoneNumber = "760-444-4444",
                            PostalCode = "92009",
                            PropertyId = 0,
                            RememberMe = true,
                            State = "CA",
                            VerifiedDate = new DateTime(2022, 9, 18, 5, 38, 53, 419, DateTimeKind.Local).AddTicks(5327)
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.SupplyItem", b =>
                {
                    b.Property<int>("SupplyItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyItemId"), 1L, 1);

                    b.Property<string>("BinNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SupplyItemFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("SupplyItemImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplyItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("SupplyItems");

                    b.HasData(
                        new
                        {
                            SupplyItemId = 1,
                            BinNumber = "23A",
                            CategoryId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 9, 18, 12, 38, 53, 419, DateTimeKind.Utc).AddTicks(5670),
                            Description = "Flathead shovel",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Shovel",
                            PropertyId = 1,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Area", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Areas")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaEventTask", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.EventTask", "EventTask")
                        .WithMany()
                        .HasForeignKey("EventTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("EventTask");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaEventType", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaSupplyItem", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.SupplyItem", "SupplyItem")
                        .WithMany()
                        .HasForeignKey("SupplyItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("SupplyItem");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Category", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Categories")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Credential", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Credentials")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.CredentialStaff", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Credential", "Credential")
                        .WithMany()
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Credential");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Document", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Documents")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Event", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Events")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventEventType", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventTask", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("EventTasks")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventType", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("EventTypes")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Message", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Messages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.PropertyStaff", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.RefreshToken", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Role", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Roles")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.RoleStaff", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.SupplyItem", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("SupplyItems")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Property", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Categories");

                    b.Navigation("Credentials");

                    b.Navigation("Documents");

                    b.Navigation("EventTasks");

                    b.Navigation("EventTypes");

                    b.Navigation("Events");

                    b.Navigation("Messages");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");

                    b.Navigation("SupplyItems");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Staff", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

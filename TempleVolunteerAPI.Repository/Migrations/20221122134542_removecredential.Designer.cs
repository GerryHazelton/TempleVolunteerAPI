// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TempleVolunteerAPI.Repository;

#nullable disable

namespace TempleVolunteerAPI.Repository.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20221122134542_removecredential")]
    partial class removecredential
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("SupplyItemsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AreaId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Areas", (string)null);

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7378),
                            Description = "This is the main temple area",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Main Temple",
                            Note = "There are no notes",
                            PropertyId = 1,
                            SupplyItemsAllowed = true
                        },
                        new
                        {
                            AreaId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7389),
                            Description = "This is the kitchen area",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Kitchen",
                            Note = "There are no notes",
                            PropertyId = 1,
                            SupplyItemsAllowed = true
                        },
                        new
                        {
                            AreaId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7397),
                            Description = "This is the bathroom area",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Bathroom",
                            Note = "There are no notes",
                            PropertyId = 1,
                            SupplyItemsAllowed = true
                        },
                        new
                        {
                            AreaId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7406),
                            Description = "This is the sunday school room area",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Sunday School Room",
                            Note = "There are no notes",
                            PropertyId = 1,
                            SupplyItemsAllowed = true
                        },
                        new
                        {
                            AreaId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7413),
                            Description = "This is the parking lot area",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Parking Lot",
                            Note = "There are no notes",
                            PropertyId = 1,
                            SupplyItemsAllowed = true
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaCommittee", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CommitteeId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "CommitteeId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("AreaCommittees", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaEventTask", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("EventTaskId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "EventTaskId");

                    b.HasIndex("EventTaskId");

                    b.ToTable("AreaEventTasks", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaSupplyItem", b =>
                {
                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyItemId")
                        .HasColumnType("int");

                    b.HasKey("AreaId", "SupplyItemId");

                    b.HasIndex("SupplyItemId");

                    b.ToTable("AreaSupplyItems", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7425),
                            Description = "This is a garden tool category",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Garden Tool",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7433),
                            Description = "This is cleaning liquid category",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Cleaning Liquid",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7441),
                            Description = "This is gas powered tool category",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Gas Powered Tool",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7448),
                            Description = "This is literature category",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Literature",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            CategoryId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7455),
                            Description = "This is cleaning appliance category",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Cleaning Appliance",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Committee", b =>
                {
                    b.Property<int>("CommitteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommitteeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommitteeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Committees", (string)null);

                    b.HasData(
                        new
                        {
                            CommitteeId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7466),
                            Description = "Flowers Committee",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Flowers",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.CommitteeStaff", b =>
                {
                    b.Property<int>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("CommitteeId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("CommitteeStaff", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Credential", b =>
                {
                    b.Property<int>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CredentialId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Credentials", (string)null);

                    b.HasData(
                        new
                        {
                            CredentialId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7476),
                            Description = "CRP Certification",
                            IsActive = true,
                            IsHidden = false,
                            Name = "CPR",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            CredentialId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7486),
                            Description = "First Aid Certification",
                            IsActive = true,
                            IsHidden = false,
                            Name = "First Aid",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            CredentialId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7493),
                            Description = "Drivers License",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Drivers License",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            CredentialId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7500),
                            Description = "Drivers License",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Passport",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            CredentialId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7513),
                            Description = "Fork Lift Certification",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Fork Lift Certification",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DocumentFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("DocumentImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Documents", (string)null);

                    b.HasData(
                        new
                        {
                            DocumentId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7525),
                            Description = "A list of events for the year",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Annual Event List",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            DocumentId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7535),
                            Description = "India Night event announcement",
                            IsActive = true,
                            IsHidden = false,
                            Name = "India Night Announcement",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            DocumentId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7542),
                            Description = "Masters Birthday event announcement",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Masters Birthday Announcement",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            DocumentId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7550),
                            Description = "All Day Meditation event announcement",
                            IsActive = true,
                            IsHidden = false,
                            Name = "All Day Meditation Announcement",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            DocumentId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7558),
                            Description = "All Day Christmas Meditation event announcement",
                            IsActive = true,
                            IsHidden = false,
                            Name = "All Day Christmas Meditation Announcement",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorLogId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Environment")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Indefinite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("AreaId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Events", (string)null);

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7577),
                            Description = "Master's birthday celebration",
                            EndDate = new DateTime(2022, 11, 23, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7575),
                            Indefinite = false,
                            IsActive = true,
                            IsHidden = false,
                            Name = "Master's Birthday",
                            Note = "There are no notes",
                            PropertyId = 1,
                            StartDate = new DateTime(2022, 11, 22, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7571)
                        },
                        new
                        {
                            EventId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7592),
                            Description = "Krishna's birthday celebration",
                            EndDate = new DateTime(2022, 11, 23, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7590),
                            Indefinite = false,
                            IsActive = true,
                            IsHidden = false,
                            Name = "Krisha's Birthday",
                            Note = "There are no notes",
                            PropertyId = 1,
                            StartDate = new DateTime(2022, 11, 22, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7588)
                        },
                        new
                        {
                            EventId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7604),
                            Description = "Sri Yukteswar's birthday celebration",
                            EndDate = new DateTime(2022, 11, 23, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7602),
                            Indefinite = false,
                            IsActive = true,
                            IsHidden = false,
                            Name = "Sri Yukteswar's Birthday",
                            Note = "There are no notes",
                            PropertyId = 1,
                            StartDate = new DateTime(2022, 11, 22, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7600)
                        },
                        new
                        {
                            EventId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7615),
                            Description = "Mahavatar's birthday celebration",
                            EndDate = new DateTime(2022, 11, 23, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7613),
                            Indefinite = false,
                            IsActive = true,
                            IsHidden = false,
                            Name = "Mahatar Babaji's Birthday",
                            Note = "There are no notes",
                            PropertyId = 1,
                            StartDate = new DateTime(2022, 11, 22, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7612)
                        },
                        new
                        {
                            EventId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7627),
                            Description = "Jesus' birthday celebration",
                            EndDate = new DateTime(2022, 11, 23, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7625),
                            Indefinite = false,
                            IsActive = true,
                            IsHidden = false,
                            Name = "Jesus' Birthday",
                            Note = "There are no notes",
                            PropertyId = 1,
                            StartDate = new DateTime(2022, 11, 22, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7623)
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventEventType", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "EventTypeId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventEventTypes", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventTask", b =>
                {
                    b.Property<int>("EventTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTaskId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTaskId");

                    b.HasIndex("PropertyId");

                    b.ToTable("EventTask", (string)null);

                    b.HasData(
                        new
                        {
                            EventTaskId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7683),
                            Description = "Setting up tables",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Table setup",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            EventTaskId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7693),
                            Description = "Setting up chairs",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Chairs setup",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            EventTaskId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7699),
                            Description = "Cleaning toilets",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Toilets",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            EventTaskId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7706),
                            Description = "Mopping floors",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Mop Floors",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            EventTaskId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7714),
                            Description = "Cleaning windows",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Clean Windows",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("EventTypes", (string)null);

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7639),
                            Description = "Comemerative Service event",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Comemerative Service",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            EventTypeId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7648),
                            Description = "Birthday Service event",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Birthday",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            EventTypeId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7656),
                            Description = "Memorial Service event",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Memorial Service",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            EventTypeId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7664),
                            Description = "Wedding Service event",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Wedding Service",
                            Note = "There are no notes",
                            PropertyId = 1
                        },
                        new
                        {
                            EventTypeId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7672),
                            Description = "Christening Service event",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Christening Service",
                            Note = "There are no notes",
                            PropertyId = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventTypeArea", b =>
                {
                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.HasKey("EventTypeId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("EventTypeAreas", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("MessageSent")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Messages", (string)null);

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7725),
                            From = "gerryhazelton@gmail.com",
                            IsActive = true,
                            IsHidden = false,
                            MessageSent = "This is my message to Jane Doe",
                            PropertyId = 1,
                            StaffId = 1,
                            Subject = "Hello Jane",
                            To = "janedoe@gmail.com"
                        },
                        new
                        {
                            MessageId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7740),
                            From = "gerryhazelton@gmail.com",
                            IsActive = true,
                            IsHidden = false,
                            MessageSent = "This is my message to John Doe",
                            PropertyId = 1,
                            StaffId = 1,
                            Subject = "Hello John",
                            To = "johndoe@gmail.com"
                        },
                        new
                        {
                            MessageId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7750),
                            From = "gerryhazelton@gmail.com",
                            IsActive = true,
                            IsHidden = false,
                            MessageSent = "This is my message to Master",
                            PropertyId = 1,
                            StaffId = 1,
                            Subject = "Hello Master",
                            To = "master@gmail.com"
                        },
                        new
                        {
                            MessageId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7758),
                            From = "gerryhazelton@gmail.com",
                            IsActive = true,
                            IsHidden = false,
                            MessageSent = "This is my message to Dolores",
                            PropertyId = 1,
                            StaffId = 1,
                            Subject = "Hello Dolores",
                            To = "dolores@gmail.com"
                        },
                        new
                        {
                            MessageId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7766),
                            From = "gerryhazelton@gmail.com",
                            IsActive = true,
                            IsHidden = false,
                            MessageSent = "This is my message to Seannie",
                            PropertyId = 1,
                            StaffId = 1,
                            Subject = "Hello Seannie",
                            To = "seannie@gmail.com"
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Address2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PropertyId");

                    b.ToTable("Properties", (string)null);

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Address = "123 Main Street",
                            Address2 = "Suite 45",
                            City = "Glendale",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7101),
                            EmailAddress = "Glendale@Srf.com",
                            FaxNumber = "333-333-3333",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Glendale Temple",
                            Note = "Currently, there are no notes",
                            PhoneNumber = "222-222-2222",
                            PostalCode = "91001",
                            State = "CA",
                            Website = "https://www.glendaletemple.org"
                        },
                        new
                        {
                            PropertyId = 2,
                            Address = "456 Main Street",
                            Address2 = "Suite 65",
                            City = "Encinitas",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7106),
                            EmailAddress = "Encinitas@Srf.com",
                            FaxNumber = "666-666-6666",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Encinitas Temple",
                            Note = "Currently, there are no notes",
                            PhoneNumber = "555-555-5555",
                            PostalCode = "92026",
                            State = "CA",
                            Website = "https://www.encinitastemple.org"
                        },
                        new
                        {
                            PropertyId = 3,
                            Address = "789 Main Street",
                            Address2 = "Suite 22",
                            City = "Fullerton",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7107),
                            EmailAddress = "Fullerton@Srf.com",
                            FaxNumber = "666-666-6666",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Fullterton Temple",
                            Note = "Currently, there are no notes",
                            PhoneNumber = "555-555-5555",
                            PostalCode = "92026",
                            State = "CA",
                            Website = "https://www.fullertontemple.org"
                        },
                        new
                        {
                            PropertyId = 4,
                            Address = "222 South Street",
                            Address2 = "Suite 11",
                            City = "San Diego",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7110),
                            EmailAddress = "SanDiego@Srf.com",
                            FaxNumber = "666-666-6666",
                            IsActive = true,
                            IsHidden = false,
                            Name = "San Diego Temple",
                            Note = "Currently, there are no notes",
                            PhoneNumber = "555-555-5555",
                            PostalCode = "92026",
                            State = "CA",
                            Website = "https://www.sandiegotemple.org"
                        },
                        new
                        {
                            PropertyId = 5,
                            Address = "444 South Street",
                            Address2 = "Suite 33",
                            City = "Hollywood Diego",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7111),
                            EmailAddress = "Hollywood@Srf.com",
                            FaxNumber = "666-666-6666",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Hollywood Temple",
                            Note = "Currently, there are no notes",
                            PhoneNumber = "555-555-5555",
                            PostalCode = "92026",
                            State = "CA",
                            Website = "https://www.hollywoodtemple.org"
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.PropertyStaff", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("PropertyStaff", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("StaffId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.RefreshTokenStaff", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffRefreshTokens", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7249),
                            Description = "Admin role has full prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Admin",
                            PropertyId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7250),
                            Description = "Volunteer has limited prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Volunteer",
                            PropertyId = 1
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7251),
                            Description = "Admin role has full prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Admin",
                            PropertyId = 2
                        },
                        new
                        {
                            RoleId = 4,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7252),
                            Description = "Volunteer has limited prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Volunteer",
                            PropertyId = 2
                        },
                        new
                        {
                            RoleId = 5,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7253),
                            Description = "Admin role has full prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Admin",
                            PropertyId = 3
                        },
                        new
                        {
                            RoleId = 6,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7254),
                            Description = "Volunteer has limited prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Volunteer",
                            PropertyId = 3
                        },
                        new
                        {
                            RoleId = 7,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7255),
                            Description = "Admin role has full prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Admin",
                            PropertyId = 4
                        },
                        new
                        {
                            RoleId = 8,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7255),
                            Description = "Volunteer has limited prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Volunteer",
                            PropertyId = 4
                        },
                        new
                        {
                            RoleId = 9,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7263),
                            Description = "Admin role has full prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Admin",
                            PropertyId = 5
                        },
                        new
                        {
                            RoleId = 10,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7264),
                            Description = "Volunteer has limited prviliedges",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Volunteer",
                            PropertyId = 5
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"), 1L, 1);

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Address2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("CPR")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSendMessages")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewDocuments")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstAid")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("Kriyaban")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LessonStudent")
                        .HasColumnType("bit");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("StaffFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StaffImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Staff", (string)null);

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            AcceptTerms = true,
                            Address = "123 Main Street",
                            Address2 = "Apt. B",
                            CPR = true,
                            CanSendMessages = true,
                            CanViewDocuments = false,
                            City = "Carlsbad",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7334),
                            EmailAddress = "gerryhazelton@gmail.com",
                            EmailConfirmed = true,
                            FirstAid = true,
                            FirstName = "Gerry",
                            Gender = "Male",
                            IsActive = true,
                            IsHidden = false,
                            IsLockedOut = false,
                            IsVerified = true,
                            Kriyaban = true,
                            LastName = "Hazelton",
                            LessonStudent = true,
                            LoginAttempts = 0,
                            Password = "11111111",
                            PasswordSalt = "371952==",
                            PhoneNumber = "760-444-4444",
                            PostalCode = "92009",
                            PropertyId = 1,
                            RememberMe = true,
                            State = "CA",
                            VerifiedDate = new DateTime(2022, 11, 22, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7295)
                        },
                        new
                        {
                            StaffId = 2,
                            AcceptTerms = true,
                            Address = "123 Main Street",
                            Address2 = "Apt. B",
                            CPR = true,
                            CanSendMessages = true,
                            CanViewDocuments = false,
                            City = "Carlsbad",
                            Country = "US",
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7341),
                            EmailAddress = "gerryhazelton@gmail.com",
                            EmailConfirmed = false,
                            FirstAid = true,
                            FirstName = "Dolores",
                            Gender = "Male",
                            IsActive = true,
                            IsHidden = false,
                            IsLockedOut = false,
                            IsVerified = true,
                            Kriyaban = true,
                            LastName = "Hazelton",
                            LessonStudent = true,
                            LoginAttempts = 0,
                            Password = "11111111",
                            PasswordSalt = "371952==",
                            PhoneNumber = "760-444-4444",
                            PostalCode = "92009",
                            PropertyId = 2,
                            RememberMe = true,
                            State = "CA",
                            VerifiedDate = new DateTime(2022, 11, 22, 5, 45, 41, 359, DateTimeKind.Local).AddTicks(7339)
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.StaffCredential", b =>
                {
                    b.Property<int>("CredentialId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CredentialId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffCredentials", (string)null);
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.StaffRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            StaffId = 1
                        },
                        new
                        {
                            RoleId = 4,
                            StaffId = 2
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.SupplyItem", b =>
                {
                    b.Property<int>("SupplyItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyItemId"), 1L, 1);

                    b.Property<string>("BinNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SupplyItemFileName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("SupplyItemImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplyItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("SupplyItems", (string)null);

                    b.HasData(
                        new
                        {
                            SupplyItemId = 1,
                            BinNumber = "23A",
                            CategoryId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7779),
                            Description = "Flathead shovel",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Shovel",
                            Note = "No notes",
                            PropertyId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            SupplyItemId = 2,
                            BinNumber = "24A",
                            CategoryId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7791),
                            Description = "Flimsy rake",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Rake",
                            Note = "No notes",
                            PropertyId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            SupplyItemId = 3,
                            BinNumber = "10C",
                            CategoryId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7799),
                            Description = "Gas driven",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Lawn Mower",
                            Note = "No notes",
                            PropertyId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            SupplyItemId = 4,
                            BinNumber = "13C",
                            CategoryId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7807),
                            Description = "Pick",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Pick",
                            Note = "No notes",
                            PropertyId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            SupplyItemId = 5,
                            BinNumber = "16B",
                            CategoryId = 1,
                            CreatedBy = "gerryhazelton@gmail.com",
                            CreatedDate = new DateTime(2022, 11, 22, 13, 45, 41, 359, DateTimeKind.Utc).AddTicks(7816),
                            Description = "Gas driven",
                            IsActive = true,
                            IsHidden = false,
                            Name = "Leaf Blower",
                            Note = "No notes",
                            PropertyId = 1,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Area", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Areas")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaCommittee", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Area", "Area")
                        .WithMany("Committees")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Committee", "Committee")
                        .WithMany("Areas")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaEventTask", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Area", "Area")
                        .WithMany("EventTasks")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.EventTask", "EventTask")
                        .WithMany("Areas")
                        .HasForeignKey("EventTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("EventTask");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.AreaSupplyItem", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Area", "Area")
                        .WithMany("SupplyItems")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.SupplyItem", "SupplyItem")
                        .WithMany("Areas")
                        .HasForeignKey("SupplyItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("SupplyItem");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Category", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Categories")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Committee", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.CommitteeStaff", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Committee", "Committee")
                        .WithMany("Staff")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany("Committees")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Credential", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Credentials")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Document", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Documents")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Event", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Events")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventEventType", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Event", "Event")
                        .WithMany("EventTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventTask", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("EventTasks")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventType", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("EventTypes")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventTypeArea", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Area", "Area")
                        .WithMany("EventTypes")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.EventType", "EventType")
                        .WithMany("Areas")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Message", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Messages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.PropertyStaff", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.RefreshToken", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("StaffId");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.RefreshTokenStaff", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.RefreshToken", "RefreshToken")
                        .WithMany()
                        .HasForeignKey("RefreshTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefreshToken");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Role", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Roles")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Staff", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("Staff")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.StaffCredential", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Credential", "Credential")
                        .WithMany("Staff")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany("Credentials")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credential");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.StaffRole", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Role", "Role")
                        .WithMany("Staff")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Staff", "Staff")
                        .WithMany("Roles")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.SupplyItem", b =>
                {
                    b.HasOne("TempleVolunteerAPI.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleVolunteerAPI.Domain.Property", "Property")
                        .WithMany("SupplyItems")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Area", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("EventTasks");

                    b.Navigation("EventTypes");

                    b.Navigation("SupplyItems");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Committee", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Credential", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Event", b =>
                {
                    b.Navigation("EventTypes");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventTask", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.EventType", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Property", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Categories");

                    b.Navigation("Credentials");

                    b.Navigation("Documents");

                    b.Navigation("EventTasks");

                    b.Navigation("EventTypes");

                    b.Navigation("Events");

                    b.Navigation("Messages");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");

                    b.Navigation("Staff");

                    b.Navigation("SupplyItems");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Role", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.Staff", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("Credentials");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("TempleVolunteerAPI.Domain.SupplyItem", b =>
                {
                    b.Navigation("Areas");
                });
#pragma warning restore 612, 618
        }
    }
}
